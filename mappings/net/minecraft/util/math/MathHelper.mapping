CLASS net/minecraft/class_1704 net/minecraft/util/math/MathHelper
	FIELD field_7150 SQUARE_ROOT_OF_TWO F
	FIELD field_7151 SINE_TABLE [F
	FIELD field_7152 MULTIPLY_DE_BRUIJN_BIT_POSITION [I
	FIELD field_7153 SMALLEST_FRACTION_FREE_DOUBLE D
	FIELD field_7154 ARCSINE_TABLE [D
	FIELD field_7155 COSINE_TABLE [D
	METHOD method_6620 sqrt (D)F
		ARG 0 value
	METHOD method_6621 absMax (DD)D
		ARG 0 a
		ARG 2 b
	METHOD method_6622 clamp (DDD)D
		ARG 0 value
		ARG 2 min
		ARG 4 max
	METHOD method_6623 sin (F)F
		ARG 0 value
	METHOD method_6624 approximatelyEquals (FF)Z
		ARG 0 a
		ARG 1 b
	METHOD method_6625 clamp (FFF)F
		ARG 0 value
		ARG 1 min
		ARG 2 max
	METHOD method_6626 abs (I)I
		ARG 0 value
	METHOD method_6627 floorDiv (II)I
		ARG 0 dividend
		ARG 1 divisor
	METHOD method_6628 clamp (III)I
		ARG 0 value
		ARG 1 min
		ARG 2 max
	METHOD method_6629 hashCode (Lnet/minecraft/class_1400;)J
		ARG 0 vec
	METHOD method_6630 parseDouble (Ljava/lang/String;D)D
		ARG 0 string
		ARG 1 fallback
	METHOD method_6631 parseDouble (Ljava/lang/String;DD)D
		ARG 0 string
		ARG 1 fallback
		ARG 3 minimum
	METHOD method_6632 parseInt (Ljava/lang/String;I)I
		ARG 0 string
		ARG 1 fallback
	METHOD method_6633 parseInt (Ljava/lang/String;II)I
		ARG 0 string
		ARG 1 fallback
		ARG 2 minimum
	METHOD method_6634 randomUuid (Ljava/util/Random;)Ljava/util/UUID;
		ARG 0 random
	METHOD method_6635 nextDouble (Ljava/util/Random;DD)D
		ARG 0 random
		ARG 1 min
		ARG 3 max
	METHOD method_6636 nextFloat (Ljava/util/Random;FF)F
		ARG 0 random
		ARG 1 min
		ARG 2 max
	METHOD method_6637 nextInt (Ljava/util/Random;II)I
		ARG 0 random
		ARG 1 min
		ARG 2 max
	METHOD method_6638 average ([J)D
		ARG 0 array
	METHOD method_6639 fastFloor (D)I
		ARG 0 value
	METHOD method_6640 atan2 (DD)D
		ARG 0 x
		ARG 2 y
	METHOD method_6641 clampedLerp (DDD)D
		ARG 0 start
		ARG 2 end
		ARG 4 delta
	METHOD method_6642 cos (F)F
		ARG 0 value
	METHOD method_6643 packRgb (FFF)I
		ARG 0 r
		ARG 1 g
		ARG 2 b
	METHOD method_6644 smallestEncompassingPowerOfTwo (I)I
		ARG 0 value
	METHOD method_6645 floorMod (II)I
		ARG 0 dividend
		ARG 1 divisor
	METHOD method_6646 packRgb (III)I
		ARG 0 r
		ARG 1 g
		ARG 2 b
	METHOD method_6647 floor (D)I
		ARG 0 value
	METHOD method_6648 getLerpProgress (DDD)D
		COMMENT Gets the fraction of the way that {@code value} is between {@code start} and {@code end}.
		COMMENT This is the delta value needed to lerp between {@code start} and {@code end} to get {@code value}.
		COMMENT In other words, {@code getLerpProgress(lerp(delta, start, end), start, end) == delta}.
		ARG 0 value
			COMMENT the result of the lerp function
		ARG 2 start
			COMMENT the value interpolated from
		ARG 4 end
			COMMENT the value interpolated to
	METHOD method_6649 sqrt (F)F
		ARG 0 value
	METHOD method_6650 hsvToRgb (FFF)I
		ARG 0 hue
		ARG 1 saturation
		ARG 2 value
	METHOD method_6651 log2 (I)I
		ARG 0 value
	METHOD method_6652 roundUpToMultiple (II)I
		COMMENT Returns a value farther than or as far as {@code value} from zero that
		COMMENT is a multiple of {@code divisor}.
		ARG 0 value
		ARG 1 divisor
	METHOD method_6653 hashCode (III)J
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD method_6654 lfloor (D)J
		ARG 0 value
	METHOD method_6655 floor (F)I
		ARG 0 value
	METHOD method_6656 isPowerOfTwo (I)Z
		ARG 0 value
	METHOD method_6658 absFloor (D)I
		ARG 0 value
	METHOD method_6659 abs (F)F
		ARG 0 value
	METHOD method_6660 log2DeBruijn (I)I
		ARG 0 value
	METHOD method_6661 ceil (D)I
		ARG 0 value
	METHOD method_6662 ceil (F)I
		ARG 0 value
	METHOD method_6663 wrapDegrees (D)D
		COMMENT Wraps an angle in degrees to the interval {@code [-180, 180)}.
		ARG 0 degrees
	METHOD method_6664 wrapDegrees (F)F
		COMMENT Wraps an angle in degrees to the interval {@code [-180, 180)}.
		ARG 0 degrees
	METHOD method_6665 fractionalPart (D)D
		ARG 0 value
	METHOD method_6666 fastInverseSqrt (D)D
		ARG 0 x
